@page "/Admin"

@using PetitionAdminApp.Models
@using PetitionAdminApp.Components
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using PetitionAdminApp.Data
@using System.Collections.Generic

@inject HttpClient Http

<h2 style="text-align: center">Petitions</h2>

<div class="container my-3" style="text-align: center; display: grid; grid-template-columns: repeat(2, auto); 
                                           gap: 50px;">
    <button type="button" class="btn btn-primary" @onclick="OpenMergeModal">Merge</button>
    <button type="button" class="btn btn-primary" @onclick="OpenDeleteModal">Delete</button>
</div>


<div class="container my-3 py-3" style="overflow-y: auto; height: calc(90vh - 100px);border: 2px solid black; border-radius: 5px">
    @if (Petitions == null)
    {
        <p style="text-align: center"><em>Loading...</em></p>
    }
    else
    {
        foreach (var item in Petitions)
        {
            <PetitionItemTemplate Petition="item" />
        }
    }
</div>

<!-- Delete Modal -->
<div class="modal @DeleteModalClass" tabindex="-1" role="dialog" style="display:@DeleteModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseDeleteModal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this entry?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="HandleDeleteItem">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Merge Modal -->
    <div class="modal @MergeModalClass" tabindex="-1" role="dialog" style="display:@MergeModalDisplay">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Merge Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseMergeModal"></button>
                </div>
                <div class="modal-body">
                   <!-- <p>Please Enter a name for the new merged entry.</p> -->
                   <!-- <input @bind="MergedPetitionName" type="text" placeholder="Name" /> -->
                    <!-- Input Field for Name -->
                        <div class="form-floating mb-3">
                            <InputText 
                                type="text" 
                                class="form-control" 
                                id="Name" 
                                placeholder="name" 
                                @bind-Value="@MergedPetitionName"/>
                             <!--<ValidationMessage For="@( () => MergedPetitionName)"/>-->
                            <label for="Name">Name</label>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => HandleMergeItems(MergedPetitionName)">Confirm</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="CloseMergeModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

@if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

@code {
    private List<Petition>? Petitions { get; set; }
    
    
    
    //[Required(ErrorMessage = "Name is required")]
    private string? MergedPetitionName { get; set; }

    
    
    protected override async Task OnInitializedAsync()
    {
        Petitions = await Http.GetFromJsonAsync<List<Petition>>("Petition");
        
        //Petitions?.Sort();
    }

    List<Petition>? CheckForCheckedPetitions()
    {
        return Petitions?.Where(p => p.IsChecked).ToList();
    }


    // DELETE SECTION
    
    private async Task HandleDeleteItem()
    {
        var checkedPetitions = CheckForCheckedPetitions();

        if (checkedPetitions == null || !checkedPetitions.Any())
        {
            // No petitions are checked, return early
            return;
        }
        
        try
        {
            foreach (var petition in checkedPetitions)
            {
                var getResponse = await Http.GetAsync($"Petition/{petition?.Id}");

                // After making the API call and checking the response...
                if (getResponse.IsSuccessStatusCode)
                {
                    var deleteResponse = await Http.DeleteAsync($"Petition/{petition?.Id}");

                    if (deleteResponse.IsSuccessStatusCode)
                    {
                        if (petition != null) Petitions?.Remove(petition);
                    }
                    else
                    {
                        // Handle error...
                    }

                    CloseDeleteModal();
                }
                else
                {
                    //TODO: error show modal
                }
            }
        }
        catch (HttpRequestException e)
        {
            // Handle exceptions that are thrown for unsuccessful response codes
            // You can use e.StatusCode to check the specific status code returned
            Console.WriteLine($"Request failed: {e.Message}");
            
            //TODO: set error modal text
        }
        catch (Exception e)
        {
            // Handle any other exceptions that occur when making the request
            Console.WriteLine($"An error occurred: {e.Message}");
            
            //TODO: set error modal text
        }
        
        
    }




    
    
    public Guid Guid = Guid.NewGuid();
    
    public string MergeModalDisplay = "none;";
    public string MergeModalClass = "";
    
    public string DeleteModalDisplay = "none;";
    public string DeleteModalClass = "";
    
    public bool ShowBackdrop;


    private void OpenMergeModal()
    {
        MergeModalDisplay = "block;";
        MergeModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    
    private void OpenDeleteModal()
    {
        DeleteModalDisplay = "block;";
        DeleteModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseMergeModal()
    {
        MergeModalDisplay = "none";
        MergeModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    
    private void CloseDeleteModal()
    {
        DeleteModalDisplay = "none";
        DeleteModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    
    
    
    
    
    
    
    private async Task HandleMergeItems(string? newName)
    {
        var checkedPetitions = CheckForCheckedPetitions();

        if (checkedPetitions == null || !checkedPetitions.Any())
        {
            // No petitions are checked, return early
            return;
        }
        
        // Merge the descriptions and create a new petition
        var newDescription = string.Join("\n", checkedPetitions.Select(p => p.Description));
        var newPetition = new Petition { Name = newName, Description = newDescription };
        
        // Post the new petition
        var response = await Http.PostAsJsonAsync("Petition", newPetition);

        if (response.IsSuccessStatusCode)
        {
            // If the post was successful, delete the original petitions
            foreach (var petition in checkedPetitions)
            {
                response = await Http.DeleteAsync($"Petition/{petition.Id}");

                if (response.IsSuccessStatusCode)
                {
                    Petitions?.Remove(petition);
                }
                else
                {
                     // Handle error...
                }
            }

            await OnInitializedAsync();
            CloseMergeModal();
        }
        else
        {
            // Handle error...
        }
    }
}