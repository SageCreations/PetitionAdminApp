@using PetitionAdminApp.Models
@using PetitionAdminApp.Components
@using System.Globalization
@inject HttpClient Http

<div class="container" style="padding: 20px">
    <div class="card">
        
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5>
                        @CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Petition?.Name?.ToLower() ?? string.Empty)
                    </h5>
                </div>
                <div class="col">
                    <div style="text-align: right">
                        <a class="btn btn-primary" @onclick="Open">Delete</a>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card-body">
            <p class="card-text">@Petition?.Description</p>
        </div>
        
        <div class="card-footer text-body-secondary" style="text-align: right">
            @Petition?.EntryDate.ToLocalTime().ToString(CultureInfo.InvariantCulture)
        </div>
        
    </div>
</div>


<!-- Modal -->
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this entry?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="HandleDeleteEvent">Delete</button>
                </div>
            </div>
        </div>
    </div>
    
    
    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }


@code {

    [Parameter] public Petition? Petition { get; set; }
    [Parameter] public EventCallback<Petition?> OnDelete { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop;


    private void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        
    }
    
    
    private async Task HandleDeleteEvent()
    {
        try
        {
            var response = await Http.GetAsync($"Petition/{Petition?.Id}");
            
            // After making the API call and checking the response...
            if (response.IsSuccessStatusCode)
            {
                await OnDelete.InvokeAsync(Petition); // invokes the actual deletion back on the admin page
                
                Close();
            }
            else
            {
                //TODO: error show modal
            }
        }
        catch (HttpRequestException e)
        {
            // Handle exceptions that are thrown for unsuccessful response codes
            // You can use e.StatusCode to check the specific status code returned
            Console.WriteLine($"Request failed: {e.Message}");
            
            //TODO: set error modal text
        }
        catch (Exception e)
        {
            // Handle any other exceptions that occur when making the request
            Console.WriteLine($"An error occurred: {e.Message}");
            
            //TODO: set error modal text
        }
    }
}